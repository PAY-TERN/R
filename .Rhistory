shp_path <- "/Users/hyunji/Desktop/work/Map/cheongju_250226/cheongju.shp"
# sf 객체(공간 데이터 저장 구조)로 불러오기
cheongju_sf <- st_read(shp_path, quiet = TRUE)
# 확인
print(cheongju_sf)
# .dbf 파일
dbf_data <- read.dbf("/Users/hyunji/Desktop/work/Map/cheongju_250226/cheongju.dbf")
# 인코딩 변환
dbf_data$EMD_NM <- iconv(dbf_data$EMD_NM, from = "CP949", to = "UTF-8")
print(head(dbf_data))
# 읍면동 지도 시각화
ggplot(data = cheongju_sf) +
geom_sf(fill = "lightblue", color = "black") +
ggtitle("청주시 읍면동 지도") +
theme_minimal()
# 인접 리스트 생성
# Queen 방식: 변 공유와 꼭짓점도 인접으로 간주
# Rook 방식: 오직 변을 공유해야만 인접으로 간주
nb_list <- poly2nb(cheongju_sf)   # 인접 읍면동이 하나도 존재하지 않은 지역 발생
### 문제 1. MULTIPOLYGON
# MULTIPOLYGON 개수 확인
sum(st_geometry_type(cheongju_sf) == "MULTIPOLYGON")
# MULTIPOLYGON을 POLYGON으로 변환
cheongju_sf_fixed <- st_cast(cheongju_sf, "POLYGON")
# POLYGON 개수 확인
sum(st_geometry_type(cheongju_sf_fixed) == "POLYGON")
# 비교
print(nrow(cheongju_sf))  # 변환 전
print(nrow(cheongju_sf_fixed))  # 변환 후
# 읍면동 코드(EMD_CD)를 기준으로 다시 병합
cheongju_sf_fixed <- cheongju_sf_fixed %>%
group_by(EMD_CD) %>%
summarise(
EMD_NM = first(EMD_NM),  # 읍면동 이름 유지
COL_ADM_SE = first(COL_ADM_SE),  # 다른 정보도 유지
SGG_OID = first(SGG_OID),
geometry = st_union(geometry)  # 다각형 병합
)
# 변환 후 다시 확인
print(table(st_geometry_type(cheongju_sf_fixed)))
print(nrow(cheongju_sf_fixed))
# MULTIPOLYGON인 행 확인
multipolygon_rows <- cheongju_sf_fixed[st_geometry_type(cheongju_sf_fixed) == "MULTIPOLYGON", ]
print(multipolygon_rows[, c("EMD_CD")])
# 문제 지역: 향정동
cheongju_sf_multi <- subset(cheongju_sf, EMD_CD == "43113137")
print(cheongju_sf_multi$EMD_NM)
# MULTIPOLYGON 시각화
ggplot() +
geom_sf(data = cheongju_sf_fixed, fill = "lightgrey", color = "black", alpha = 0.5) +
geom_sf(data = multipolygon_rows, fill = "red", color = "red", alpha = 0.8) +   # MULTIPOLYGON 강조
ggtitle("MULTIPOLYGON으로 남아 있는 읍면동") +
theme_minimal()
# MULTIPOLYGON을 개별 POLYGON으로 변환
multipolygon_expanded <- st_cast(multipolygon_rows, "POLYGON")
# 변환 후 개수 확인
print(nrow(multipolygon_expanded))   # 결과가 2지만 지도상 보이지 않을 정도로 작음
# MULTIPOLYGON Solution
# 1. 큰 곳만 남기기
# MULTIPOLYGON을 개별 POLYGON으로 변환
multipolygon_expanded <- st_cast(multipolygon_rows, "POLYGON")
print(table(st_geometry_type(multipolygon_expanded)))
# 각 폴리곤의 면적 계산 후 가장 큰 폴리곤만 유지
multipolygon_largest <- multipolygon_expanded %>%
mutate(area = st_area(geometry)) %>%
filter(area == max(area)) %>%
select(-area)  # 면적 컬럼 제거
# 지도에 가장 큰 폴리곤만 표시
ggplot() +
geom_sf(data = cheongju_sf_fixed, fill = "lightgrey", color = "black", alpha = 0.5) +
geom_sf(data = multipolygon_largest, fill = "red", color = "red", alpha = 0.8) +
ggtitle("가장 큰 폴리곤만 남긴 읍면동") +
theme_minimal()
# 2. 두 곳 병합
# MULTIPOLYGON을 POLYGON으로 변환 후 병합
multipolygon_merged <- multipolygon_expanded %>%
group_by(EMD_CD) %>%
summarise(geometry = st_union(geometry), .groups = "drop") %>%
st_cast("POLYGON")
# POLYGON 구분을 위해 각 행별 ID 추가
multipolygon_merged <- multipolygon_merged %>%
mutate(poly_id = row_number())  # 각 폴리곤에 고유 ID 부여
# 지도 시각화
ggplot() +
geom_sf(data = multipolygon_merged, aes(fill = factor(poly_id)), color = "black", alpha = 0.7) +
scale_fill_manual(values = c("red", "blue")) +
ggtitle(paste("EMD_CD:", unique(multipolygon_merged$EMD_CD), " - Num 1, 2 POLYGON 시각화")) +
theme_minimal()
ggplot() +
geom_sf(data = multipolygon_merged %>% filter(poly_id == 1), fill = "red", color = "black", alpha = 0.7) +
ggtitle(paste("EMD_CD:", unique(multipolygon_merged$EMD_CD), " - Num 1 POLYGON")) +
theme_minimal()
# 지도 시각화
ggplot() +
geom_sf(data = multipolygon_merged, aes(fill = factor(poly_id)), color = "black", alpha = 0.7) +
scale_fill_manual(values = c("red", "blue")) +
ggtitle(paste("EMD_CD:", unique(multipolygon_merged$EMD_CD), " - Num 1, 2 POLYGON 시각화")) +
theme_minimal()
ggplot() +
geom_sf(data = multipolygon_merged %>% filter(poly_id == 1), fill = "red", color = "black", alpha = 0.7) +
ggtitle(paste("EMD_CD:", unique(multipolygon_merged$EMD_CD), " - Num 1 POLYGON")) +
theme_minimal()
# MULTIPOLYGON 시각화
ggplot() +
geom_sf(data = cheongju_sf_fixed, fill = "lightgrey", color = "black", alpha = 0.5) +
geom_sf(data = multipolygon_rows, fill = "red", color = "red", alpha = 0.8) +   # MULTIPOLYGON 강조
ggtitle("MULTIPOLYGON으로 남아 있는 읍면동") +
theme_minimal()
# 지도
plot(st_geometry(cheongju_sf_fixed), border = "grey", main = "Cheongju Map")
# 인접 리스트
nb_list_fixed <- poly2nb(cheongju_sf_fixed)
# 인접하지 않는 지역 유무 확인
no_neighbors <- which(card(nb_list_fixed) == 0)
# 인접한 곳이 없는 읍면동 : 상신동, 외북동
isolated <- data.frame(
EMD_CD = cheongju_sf_fixed$EMD_CD[no_neighbors],
EMD_NM = cheongju_sf_fixed$EMD_NM[no_neighbors]
)
print(isolated)
# 인접하지 않은 읍면동
isolated_areas <- cheongju_sf_fixed[no_neighbors, ]
# 지도 시각화
ggplot() +
geom_sf(data = cheongju_sf_fixed, fill = "lightgrey", color = "black") +  # 전체 지도
geom_sf(data = isolated_areas, fill = "red", color = "black") +  # 인접 읍면동이 없는 지역 강조
ggtitle("인접 읍면동이 없는 지역") +
theme_minimal()
library(sf)
library(spdep)
library(dplyr)
library(igraph)
library(ggplot2)
### 구 시각화
# EMD_CD 앞 5자리 추출
cheongju_sf <- cheongju_sf %>%
mutate(GU_CD = substr(EMD_CD, 1, 5))
# 구별 읍면동 개수
gu_count <- cheongju_sf %>%
group_by(GU_CD) %>%
summarise(읍면동_개수 = n())
print(gu_count)
# 지도 시각화 : 구별 시각화
ggplot() +
geom_sf(data = cheongju_sf, aes(fill = factor(GU_CD), color = "black")) +
scale_fill_manual(values = c("43111" = "red", "43112" = "blue", "43113" = "green", "43114" = "purple")) +
labs(title = "GU", fill = "GU code") +
theme_minimal()
### 흥덕구(43113)
# 흥덕구 지도 데이터
hd_path <- "/Users/hyunji/Desktop/work/Map/heungdeok_250227/heungdeok.shp"
hd_sf <- st_read(hd_path, quiet = TRUE)
print(hd_sf)
# 흥덕구 지도 시각화
ggplot(data = hd_sf) +
geom_sf(fill = "lightblue", color = "black") +
ggtitle("Heungdeok-Gu") +
theme_minimal()
# 인접 리스트 생성
hdnb_list <- poly2nb(hd_sf)
print(hdnb_list)   # multipolygon 문제
# MULTIPOLYGON 개수 확인
sum(st_geometry_type(hd_sf) == "MULTIPOLYGON")
# POLYGON으로 변환
cheongju_sf_fixed <- st_cast(hd_sf, "POLYGON")
# POLYGON 개수 확인
sum(st_geometry_type(cheongju_sf_fixed) == "POLYGON")
multipolygon_expanded <- hd_sf %>%
filter(EMD_CD == "43113137") %>%
st_cast("POLYGON")
largest_polygon <- multipolygon_expanded %>%
slice_max(st_area(geometry), n = 1)
# MultiPolygon 항목 제거
hd_sf_fixed <- hd_sf %>%
filter(EMD_CD != "43113137")
# Polygon 추가
hd_sf_fixed <- rbind(hd_sf_fixed, largest_polygon)
# 인접 리스트 생성
hdnb_list <- poly2nb(hd_sf_fixed)
print(hdnb_list)   # 인접 = 0 지역 문제
# 인접하지 않는 지역 유무 확인
no_neighbors <- which(card(hdnb_list) == 0)
# 인접한 곳이 없는 읍면동 : 상신동, 외북동
isolated <- data.frame(
EMD_CD = hd_sf_fixed$EMD_CD[no_neighbors],
EMD_NM = hd_sf_fixed$EMD_NM[no_neighbors]
)
print(isolated)
# 인접하지 않은 읍면동
isolated_areas <- hd_sf[no_neighbors, ]
# 지도 시각화
ggplot() +
geom_sf(data = hd_sf, fill = "lightgrey", color = "black") +  # 전체 지도
geom_sf(data = isolated_areas, fill = "red", color = "black") +  # 인접 읍면동이 없는 지역 강조
ggtitle("인접 읍면동이 없는 지역") +
theme_minimal()
library(sf)
library(sf)
library(spdep)
library(spdep)
library(dplyr)
library(igraph)
library(ggplot2)
install.packages("lubridate")
# 필요한 패키지
library(readxl)
library(dplyr)
library(lubridate)
library(ggplot2)
# 필요한 패키지
library(readxl)
library(dplyr)
library(lubridate)
library(ggplot2)
install.packages("readxl")
# 필요한 패키지
library(readxl)
library(dplyr)
library(lubridate)
library(ggplot2)
setwd("~/Desktop/work/[개신프론티어]/PAY-TERN/R")
# 엑셀 파일 불러오기
df <- read_excel("../Data/hj_cheongju-pay.xlsx", sheet = "Classification_Results")
# 날짜 형식 변환
df <- df %>%
mutate(이용일자 = as.Date(substr(이용일자, 1, 10)),  # 시간 제거
월 = floor_date(이용일자, "month"),
분기 = paste0(year(이용일자), " Q", quarter(이용일자)))
# 숫자형 변환
df$이용금액 <- as.numeric(df$이용금액)
# 1. 카테고리별 소비 합계
카테고리_소비 <- df %>%
group_by(카테고리) %>%
summarise(총이용금액 = sum(이용금액, na.rm = TRUE)) %>%
arrange(desc(총이용금액))
# 2. 월별 소비 추이
월별_소비 <- df %>%
group_by(월) %>%
summarise(총이용금액 = sum(이용금액, na.rm = TRUE))
# 3. 분기별 소비 추이
분기별_소비 <- df %>%
group_by(분기) %>%
summarise(총이용금액 = sum(이용금액, na.rm = TRUE))
# 4. 시각화 예시 (월별 소비)
ggplot(월별_소비, aes(x = 월, y = 총이용금액)) +
geom_line() +
geom_point() +
labs(title = "월별 소비 추이", x = "월", y = "이용금액")
theme_set(theme_minimal(base_family = "AppleGothic"))
# 4. 시각화 예시 (월별 소비)
ggplot(월별_소비, aes(x = 월, y = 총이용금액)) +
geom_line() +
geom_point() +
labs(title = "월별 소비 추이", x = "월", y = "이용금액")
카테고리_소비
# 카테고리별 소비 시각화
ggplot(카테고리_소비, aes(x = reorder(카테고리, 총이용금액), y = 총이용금액)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +
labs(title = "카테고리별 소비 금액", x = "카테고리", y = "총 이용 금액") +
theme_minimal(base_family = "AppleGothic")
# 2. 월별 소비 추이
월별_소비 <- df %>%
group_by(월) %>%
summarise(총이용금액 = sum(이용금액, na.rm = TRUE))
# 월별 소비 시각화
ggplot(월별_소비, aes(x = 월, y = 총이용금액)) +
geom_line(color = "steelblue", size = 1.2) +
geom_point(size = 3, color = "darkblue") +
labs(title = "월별 소비 추이", x = "월", y = "이용 금액") +
theme_minimal(base_family = "AppleGothic")
# 카테고리별 월별 소비 비중 분석 (비율)
카테고리_월별_비중 <- df %>%
group_by(월, 카테고리) %>%
summarise(카테고리_이용금액 = sum(이용금액, na.rm = TRUE)) %>%
group_by(월) %>%
mutate(비중 = 카테고리_이용금액 / sum(카테고리_이용금액))
# 카테고리별 월별 비중 stacked bar chart
ggplot(카테고리_월별_비중, aes(x = 월, y = 비중, fill = 카테고리)) +
geom_bar(stat = "identity") +
labs(title = "월별 카테고리 소비 비중", x = "월", y = "비중") +
theme_minimal(base_family = "AppleGothic")
월별_소비 <- 월별_소비 %>%
mutate(월표시 = format(월, "%y.%m"))
# 월별 소비 시각화
ggplot(월별_소비, aes(x = 월, y = 총이용금액)) +
geom_line(color = "steelblue", size = 1.2) +
geom_point(size = 3, color = "darkblue") +
labs(title = "월별 소비 추이", x = "월", y = "이용 금액") +
theme_minimal(base_family = "AppleGothic")
# 월별 소비 시각화
ggplot(월별_소비, aes(x = 월표시, y = 총이용금액, group = 1)) +
geom_line(color = "steelblue", size = 1.2) +
geom_point(size = 3, color = "darkblue") +
labs(title = "월별 소비 추이", x = "월", y = "이용 금액") +
theme_minimal(base_family = "AppleGothic") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
월별_소비 <- 월별_소비 %>%
filter(!is.na(월)) %>%
mutate(월표시 = format(월, "%y.%m"))
# 월별 소비 시각화
ggplot(월별_소비, aes(x = 월표시, y = 총이용금액, group = 1)) +
geom_line(color = "steelblue", size = 1.2) +
geom_point(size = 3, color = "darkblue") +
labs(title = "월별 소비 추이", x = "월", y = "이용 금액") +
theme_minimal(base_family = "AppleGothic") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 카테고리별 월별 소비 비중 분석 (비율)
카테고리_월별_비중 <- df %>%
group_by(월, 카테고리) %>%
summarise(카테고리_이용금액 = sum(이용금액, na.rm = TRUE)) %>%
group_by(월) %>%
mutate(비중 = 카테고리_이용금액 / sum(카테고리_이용금액))
# 카테고리별 월별 비중 stacked bar chart
ggplot(카테고리_월별_비중, aes(x = 월, y = 비중, fill = 카테고리)) +
geom_bar(stat = "identity") +
labs(title = "월별 카테고리 소비 비중", x = "월", y = "비중") +
theme_minimal(base_family = "AppleGothic")
# 카테고리별 월별 소비 비중 분석 (비율)
df <- df %>%
filter(!is.na(카테고리), !is.na(월))
# Stacked bar chart: 월 전체 표시 + 한글 폰트 적용
ggplot(카테고리_월별_비중, aes(x = 월표시, y = 비중, fill = 카테고리)) +
geom_bar(stat = "identity") +
labs(title = "월별 카테고리 소비 비중", x = "월", y = "비중") +
theme_minimal(base_family = "AppleGothic") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 카테고리별 월별 소비 비중 분석 (비율)
df <- df %>%
filter(!is.na(카테고리), !is.na(월))
카테고리_월별_비중 <- df %>%
group_by(월, 카테고리) %>%
summarise(카테고리_이용금액 = sum(이용금액, na.rm = TRUE)) %>%
group_by(월) %>%
mutate(비중 = 카테고리_이용금액 / sum(카테고리_이용금액)) %>%
ungroup() %>%
mutate(월표시 = format(월, "%y.%m"))  # 연.월 문자열 생성
# Stacked bar chart: 월 전체 표시 + 한글 폰트 적용
ggplot(카테고리_월별_비중, aes(x = 월표시, y = 비중, fill = 카테고리)) +
geom_bar(stat = "identity") +
labs(title = "월별 카테고리 소비 비중", x = "월", y = "비중") +
theme_minimal(base_family = "AppleGothic") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Stacked bar chart: 월 전체 표시 + 한글 폰트 적용
최고비중_카테고리 <- 카테고리_월별_비중 %>%
group_by(월표시) %>%
slice_max(order_by = 비중, n = 1) %>%
ungroup()
ggplot(카테고리_월별_비중, aes(x = 월표시, y = 비중, fill = 카테고리)) +
geom_bar(stat = "identity") +
# 최대 비중 카테고리에 라벨 추가
geom_text(data = 최고비중_카테고리,
aes(label = paste0(round(비중 * 100, 1), "%"), y = 비중 + 0.03),  # 라벨을 막대 위에 약간 띄움
size = 3,
color = "black") +
labs(title = "월별 카테고리 소비 비중", x = "월", y = "비중") +
theme_minimal(base_family = "AppleGothic") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(카테고리_월별_비중, aes(x = 월표시, y = 비중, fill = 카테고리)) +
geom_bar(stat = "identity") +
# 카테고리명을 라벨로 표시
geom_text(data = 최고비중_카테고리,
aes(label = 카테고리, y = 비중 + 0.03),  # 막대 위 살짝 띄움
size = 3,
color = "black") +
labs(title = "월별 카테고리 소비 비중", x = "월", y = "비중") +
theme_minimal(base_family = "AppleGothic") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(카테고리_월별_비중, aes(x = 월표시, y = 비중, fill = 카테고리)) +
geom_bar(stat = "identity") +
# 카테고리명을 라벨로 표시
geom_text(data = 최고비중_카테고리,
aes(label = 카테고리, y = 비중 + 0.03),  # 막대 위 살짝 띄움
size = 3,
color = "black") +
labs(title = "월별 카테고리 소비 비중", x = "월", y = "비중") +
theme_minimal(base_family = "AppleGothic") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
theme_set(theme_minimal(base_family = "AppleGothic"))
ggplot(카테고리_월별_비중, aes(x = 월표시, y = 비중, fill = 카테고리)) +
geom_bar(stat = "identity") +
# 카테고리명을 라벨로 표시
geom_text(data = 최고비중_카테고리,
aes(label = 카테고리, y = 비중 + 0.03),  # 막대 위 살짝 띄움
size = 3,
color = "black") +
labs(title = "월별 카테고리 소비 비중", x = "월", y = "비중") +
theme_minimal(base_family = "AppleGothic") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(카테고리_월별_비중, aes(x = 월표시, y = 비중, fill = 카테고리)) +
geom_bar(stat = "identity") +
# 카테고리명을 라벨로 표시
geom_text(data = 최고비중_카테고리,
aes(label = 카테고리, y = 비중 + 0.03),  # 막대 위 살짝 띄움
size = 3,
color = "black",
family = "AppleGothic") +
labs(title = "월별 카테고리 소비 비중", x = "월", y = "비중") +
theme_minimal(base_family = "AppleGothic") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 3. 분기별 소비 추이
분기별_소비 <- df %>%
group_by(분기) %>%
summarise(총이용금액 = sum(이용금액, na.rm = TRUE),
평균이용금액 = mean(이용금액, na.rm = TRUE)) %>%
arrange(분기) %>%
mutate(전분기대비증감률 = round((총이용금액 - lag(총이용금액)) / lag(총이용금액) * 100, 2))
# 분기별 소비 금액 시각화
ggplot(분기별_소비, aes(x = 분기, y = 총이용금액, group = 1)) +
geom_line(color = "darkgreen", size = 1.2) +
geom_point(size = 3, color = "forestgreen") +
labs(title = "분기별 소비 추이", x = "분기", y = "총 이용 금액") +
theme_minimal(base_family = "AppleGothic")
# 전분기 대비 증감률 출력
print(분기별_소비)
# 카테고리별 소비 시각화
ggplot(카테고리_소비, aes(x = reorder(카테고리, 총이용금액), y = 총이용금액)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +
labs(title = "카테고리별 소비 금액", x = "카테고리", y = "총 이용 금액") +
theme_minimal(base_family = "AppleGothic")
월별_소비 <- 월별_소비 %>%
filter(!is.na(카테고리))
# 카테고리별 소비 시각화
ggplot(카테고리_소비, aes(x = reorder(카테고리, 총이용금액), y = 총이용금액)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +
labs(title = "카테고리별 소비 금액", x = "카테고리", y = "총 이용 금액") +
theme_minimal(base_family = "AppleGothic")
# 1. 카테고리별 소비 합계
카테고리_소비 <- df %>%
group_by(카테고리) %>%
summarise(총이용금액 = sum(이용금액, na.rm = TRUE)) %>%
arrange(desc(총이용금액))
월별_소비 <- 월별_소비 %>%
filter(!is.na(카테고리))
# 카테고리별 소비 시각화
ggplot(카테고리_소비, aes(x = reorder(카테고리, 총이용금액), y = 총이용금액)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +
labs(title = "카테고리별 소비 금액", x = "카테고리", y = "총 이용 금액") +
theme_minimal(base_family = "AppleGothic")
# 카테고리별 소비 시각화
ggplot(카테고리_소비, aes(x = reorder(카테고리, 총이용금액), y = 총이용금액)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +
labs(title = "카테고리별 소비 금액", x = "카테고리", y = "총 이용 금액") +
scale_y_continuous(labels = comma) +  # 콤마로 보기 쉽게
theme_minimal(base_family = "AppleGothic")
library(scales)
# 카테고리별 소비 시각화
ggplot(카테고리_소비, aes(x = reorder(카테고리, 총이용금액), y = 총이용금액)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +
labs(title = "카테고리별 소비 금액", x = "카테고리", y = "총 이용 금액") +
scale_y_continuous(labels = comma) +  # 콤마로 보기 쉽게
theme_minimal(base_family = "AppleGothic")
# 2. 월별 소비 추이
월별_소비 <- df %>%
group_by(월) %>%
summarise(총이용금액 = sum(이용금액, na.rm = TRUE))
월별_소비 <- 월별_소비 %>%
mutate(월표시 = format(월, "%y.%m"))
월별_소비 <- 월별_소비 %>%
filter(!is.na(월)) %>%
mutate(월표시 = format(월, "%y.%m"))
# 월별 소비 시각화
ggplot(월별_소비, aes(x = 월표시, y = 총이용금액, group = 1)) +
geom_line(color = "steelblue", size = 1.2) +
geom_point(size = 3, color = "darkblue") +
labs(title = "월별 소비 추이", x = "월", y = "이용 금액") +
theme_minimal(base_family = "AppleGothic") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 카테고리별 월별 소비 비중 분석 (비율)
df <- df %>%
filter(!is.na(카테고리), !is.na(월))
카테고리_월별_비중 <- df %>%
group_by(월, 카테고리) %>%
summarise(카테고리_이용금액 = sum(이용금액, na.rm = TRUE)) %>%
group_by(월) %>%
mutate(비중 = 카테고리_이용금액 / sum(카테고리_이용금액)) %>%
ungroup() %>%
mutate(월표시 = format(월, "%y.%m"))  # 연.월 문자열 생성
# Stacked bar chart
최고비중_카테고리 <- 카테고리_월별_비중 %>%
group_by(월표시) %>%
slice_max(order_by = 비중, n = 1) %>%
ungroup()
ggplot(카테고리_월별_비중, aes(x = 월표시, y = 비중, fill = 카테고리)) +
geom_bar(stat = "identity") +
# 카테고리명을 라벨로 표시
geom_text(data = 최고비중_카테고리,
aes(label = 카테고리, y = 비중 + 0.03),  # 막대 위 살짝 띄움
size = 3,
color = "black",
family = "AppleGothic") +
labs(title = "월별 카테고리 소비 비중", x = "월", y = "비중") +
theme_minimal(base_family = "AppleGothic") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 3. 분기별 소비 추이
분기별_소비 <- df %>%
group_by(분기) %>%
summarise(총이용금액 = sum(이용금액, na.rm = TRUE),
평균이용금액 = mean(이용금액, na.rm = TRUE)) %>%
arrange(분기) %>%
mutate(전분기대비증감률 = round((총이용금액 - lag(총이용금액)) / lag(총이용금액) * 100, 2))
# 분기별 소비 금액 시각화
ggplot(분기별_소비, aes(x = 분기, y = 총이용금액, group = 1)) +
geom_line(color = "darkgreen", size = 1.2) +
geom_point(size = 3, color = "forestgreen") +
labs(title = "분기별 소비 추이", x = "분기", y = "총 이용 금액") +
theme_minimal(base_family = "AppleGothic")
